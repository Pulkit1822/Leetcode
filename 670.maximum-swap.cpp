/*
 * @lc app=leetcode id=670 lang=cpp
 *
 * [670] Maximum Swap
 */

// @lc code=start
class Solution {
public:
    /**
     * Given a string str, and an integer s, this function finds the maximum
     * number that can be generated by swapping the digit at index s with any
     * other digit in the string. The maximum number is then converted back to
     * an integer and returned.
     * @param str the input string
     * @param s the index of the digit to be swapped
     * @return the maximum number that can be generated
     */
int swaping(string str,int s) {
        
        

        int maxi = -1; 
        int pos = -1;  
        
        
        for (int i = s; i < str.size(); i++) {
            if (int(str[i] - '0') >= maxi) {
                maxi = int(str[i] - '0');
                pos = i;
            }
        }
        
        
        char a = str[s];
        str[s] = maxi + '0';  
        str[pos] = a;
        
        
        return stoi(str);
    }
    /**
     * @brief Given a integer num, return the maximum swapped integer.
     * 
     * The approach is to first convert the integer to a string. Then, for each digit in the string, 
     * swap the current digit with the maximum digit to the right of the current digit. Update the
     * maximum swapped integer. At the end, return the maximum swapped integer.
     * 
     * Time complexity: O(n), where n is the number of digits in the integer.
     * Space complexity: O(n), where n is the number of digits in the integer.
     */
    int maximumSwap(int num) {
       int maxi=INT_MIN;
       string str=to_string(num);
       for(int i=0;i<str.size();i++)
       {
        maxi=max(maxi,swaping(str,i));
       }
       return maxi;
    }
};
// @lc code=end

